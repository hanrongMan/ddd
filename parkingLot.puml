@startuml

Class ParkingManager <<Entity>> <<Aggregate Root>>  {
  List<UUID> parkingBoys

+ ParkingBoy findParkingBoy(List<UUID> parkingBoys)
}

Class ParkingBoy <<Value Object>> {
  + void setParkingLots (ParkingLot[] parkingLots)
  + ParkingLot[] getParkingLots()
}

Class ParkingBoyConfig  << Entity >> <<Aggregate Root>>{
  List<UUID> parkingLots
  FindParkingLotStrategy findParkingLotStrategy
}

class ParkingLot << Entity >> <<Aggregate Root>> {
  UUID id
  int capacity
  Map <Ticket, Car> parkedCars

  + Ticket park(Car car)
  + Car take(Ticket ticket)
}

Class Car << Value Object >> {
    PlateNumber plateNumber
}

Class Ticket << Value Object >> {
  + Boolean validate()
}

class FindParkingLotService <<Service>> {
ParkingLot findParkingLot(ParkingBoy parkingBoy)
}

class ParkCarService <<Service>> {
+ Ticket parkCar(ParkingLot parkingLot,Car car)
}

abstract class FindParkingLotStrategy <<Strategy>> <<Value Object>>{
abstract ParkingLot find(ParkingLot[] parkingLots)
}

Class SortedFindParkingLot{
+ParkingLot find(ParkingLot[] parkingLots)
}

Class SpaceMaxFindParkingLot{
+ParkingLot find(ParkingLot[] parkingLots)
}

Class ParkingBoyFactory {
+static ParkingBoy(ParkingBoyConfig parkingBoyConfig)
}

FindParkingLotStrategy  <|.. SortedFindParkingLot
FindParkingLotStrategy  <|.. SpaceMaxFindParkingLot
ParkingManager "1" o--> "0..many" ParkingBoy
Ticket "1" *--> "1" Car
ParkingLot "1" o--> "0..many" Ticket
ParkingBoy "1" o--> "0..many" ParkingLot
ParkingBoyConfig "1" o--> "1" FindParkingLotStrategy
FindParkingLotService ..> ParkingBoy
ParkCarService ..> ParkingLot
ParkCarService ..> Car
ParkingBoyConfig ..> ParkingBoy

ParkingBoyFactory ..>ParkingBoy
ParkingBoyFactory ..>ParkingBoyConfig

@enduml